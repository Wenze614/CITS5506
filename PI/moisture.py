import spidev
from datetime import datetime
import time

class Moisture:
    spi = spidev.SpiDev()
    channel = None
    def __init__(self, channel, bus=0, max_speed=1000000):
        ''' 
        Args:
        channel (int): The SPI input channel
        bus (int): The SPI bus
        '''
        self.channel = channel
        self.spi.open(bus,0)
        self.spi.max_speed_hz=max_speed

    def _read_channel(self, places=2):
        ''' Read ADC measurement from a channel generated by MCP3208 chip, Channel must be an integer 0-7
        Args:
        places (int): round spi informtion to decimal place

        Return:
        a float round moisture ADC measurement 
        '''
        adc = self.spi.xfer2([1,(8+self.channel)<<4,0])
        data = ((adc[1]&3) << 8) + adc[2]
        return round(data, places)
        
    def _moisture_ATP(self, value):
        ''' Transform the moisture measurement to percentage with max 530 and min 0
        Args:
        value (int): The moisture measurement

        Return:
        A float value in percentage 0-100
        '''
        if value > 530:
            value = 530
        elif value < 0:
            value = 0
        return (value/530)*100
    
    def get_moisture(self, division=20):
        '''
        Args: Collect data from moisture sensor and take average
        division (int): How many times is used to measure and adjust the moisture measurement

        Return:
        An average of moisture measurement and current time in UTC
        '''
        measures = []
        for i in range(0, division):
            measures.append(self._moisture_ATP(self._read_channel()))
            time.sleep(10)
        return sum(measures)/division, datetime.utcnow()

# if __name__ == "__main__":
#     import time
#     from influx import Influx
#     mod = Moisture(1)
#     flux = Influx()
#     while True:
#         data, _time = mod.get_moisture()
#         print(data)
#         flux.send_moisture(data, _time)
#         time.sleep(1)
